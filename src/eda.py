import pandas as pd
import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt
import streamlit as st
import os
from sklearn.preprocessing import MinMaxScaler, RobustScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_selection import RFE
import json
import pickle
from sklearn.preprocessing import StandardScaler
import numpy as np
from imblearn.over_sampling import SMOTE

SAVE_PATH = "results"  # Directory to store results
EC1_FEATURES_FILE = os.path.join(SAVE_PATH, "selected_features_ec1.json")
EC2_FEATURES_FILE = os.path.join(SAVE_PATH, "selected_features_ec2.json")
EC1_DF_FILE = os.path.join(SAVE_PATH, "df_selected_ec1.pkl")
EC2_DF_FILE = os.path.join(SAVE_PATH, "df_selected_ec2.pkl")
os.makedirs(SAVE_PATH, exist_ok=True)

if 'df_filtered' not in st.session_state:
    st.session_state.df_filtered = None

def eda(df):
    # T·∫°o c√°c tab ch√≠nh
    tabs = st.tabs(["Ph√¢n T√≠ch ƒê∆°n Bi·∫øn", "Ph√¢n T√≠ch Hai Bi·∫øn", "Ph√¢n T√≠ch ƒêa Bi·∫øn", "X·ª≠ L√Ω D·ªØ Li·ªáu"])

    with tabs[0]:
        st.header("üìä Ph√¢n T√≠ch ƒê∆°n Bi·∫øn")

        # Ch·ªçn ƒë·∫∑c tr∆∞ng ƒë·ªÉ ph√¢n t√≠ch
        selected_feature = st.selectbox("Ch·ªçn ƒë·∫∑c tr∆∞ng ƒë·ªÉ ph√¢n t√≠ch", df.columns)

        if selected_feature:
            # T·∫°o 2 c·ªôt
            col1, col2 = st.columns(2)

            # Histogram trong c·ªôt 1
            with col1:
                st.subheader("Histogram")
                fig, ax = plt.subplots()
                sns.histplot(df[selected_feature], kde=True, ax=ax)
                st.pyplot(fig)

            # Boxplot trong c·ªôt 2
            with col2:
                st.subheader("Boxplot")
                fig, ax = plt.subplots()
                sns.boxplot(y=df[selected_feature], ax=ax)
                st.pyplot(fig)
                
    with tabs[1]:
        st.header("üìà Ph√¢n T√≠ch Hai Bi·∫øn")
        subtabs = st.tabs(["Correlation with EC1",  "Correlation with EC2"])
        # # Ch·ªçn bi·∫øn m·ª•c ti√™u (v√≠ d·ª•: EC1)
        # target = st.selectbox("Ch·ªçn bi·∫øn m·ª•c ti√™u", ["EC1", "EC2"])
        
        # # ƒê∆∞·ªùng d·∫´n l∆∞u tr·ªØ ·∫£nh
        # image_path = f"violin_plots_{target}.png"

        # st.subheader(f"Violin Plot cho t·ª´ng ƒë·∫∑c tr∆∞ng v·ªõi {target}")
        # st.image(image_path, caption="Violin Plots", use_container_width=True)
        
         # T√≠nh to√°n ma tr·∫≠n t∆∞∆°ng quan
        corr = df.corr()

        # L·∫•y t∆∞∆°ng quan m√† kh√¥ng bao g·ªìm 'EC1' v√† 'EC2'
        ec1_corr = corr['EC1'].drop(['EC1', 'EC2'])
        ec2_corr = corr['EC2'].drop(['EC1', 'EC2'])

        # S·∫Øp x·∫øp gi√° tr·ªã t∆∞∆°ng quan gi·∫£m d·∫ßn
        ec1_corr_sorted = ec1_corr.sort_values(ascending=False)
        ec2_corr_sorted = ec2_corr.sort_values(ascending=False)

        with subtabs[0]:
            # Hi·ªÉn th·ªã heatmap t∆∞∆°ng quan v·ªõi EC1
            st.subheader("Heatmap t∆∞∆°ng quan v·ªõi EC1")
            sns.set_style("white")
            sns.set_palette("PuBuGn_d")
            fig1, ax1 = plt.subplots()
            sns.heatmap(ec1_corr_sorted.to_frame(), cmap="coolwarm", annot=True, fmt='.2f', ax=ax1)
            ax1.set_title('Correlation with EC1')
            st.pyplot(fig1)

        with subtabs[1]:
            # Hi·ªÉn th·ªã heatmap t∆∞∆°ng quan v·ªõi EC2
            st.subheader("Heatmap t∆∞∆°ng quan v·ªõi EC2")
            fig2, ax2 = plt.subplots()
            sns.heatmap(ec2_corr_sorted.to_frame(), cmap="coolwarm", annot=True, fmt='.2f', ax=ax2)
            ax2.set_title('Correlation with EC2')
            st.pyplot(fig2)

    with tabs[2]:
        st.header("üîç Ph√¢n T√≠ch ƒêa Bi·∫øn")
        st.write('---')
        
        st.subheader("Correlation Matrix")
        # Calculate the correlation matrix
        corr = df.corr()

        # Generate a mask for the upper triangle
        mask = np.triu(np.ones_like(corr, dtype=bool))

        # Set up the matplotlib figure
        f, ax = plt.subplots(figsize=(11, 9))

        # Generate a custom diverging colormap
        cmap = sns.diverging_palette(230, 20, as_cmap=True)

        # Draw the heatmap with the mask and correct aspect ratio
        sns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,
            square=True, linewidths=.5, cbar_kws={"shrink": .5})
        st.pyplot(f)
    with tabs[3]:
        # --- Tabs Layout ---
        tabs = st.tabs(["Ch·ªçn Feature", "Lo·∫°i B·ªè Outliers", "Scale Data", "SMOTE"])
        corr = df.corr()

        union_cols_df = df.copy()
        union_cols_df = union_cols_df.drop(['EC1', 'EC2'], axis=1)
        labels = df[['EC1', 'EC2']]
        # --- Tab 0: Ch·ªçn Feature ---
        with tabs[0]:
            st.subheader("Ch·ªçn Feature ƒë·ªÉ x·ª≠ l√Ω")
 
            selected_feature = st.selectbox("Ch·ªçn ƒë·∫∑c tr∆∞ng ƒë·ªÉ x·ª≠ l√Ω", union_cols_df.columns, key="selected_feature")
            
            st.write(f"Feature ƒë∆∞·ª£c ch·ªçn: **{selected_feature}**")

        # --- Tab 1: Lo·∫°i B·ªè Outliers ---
        with tabs[1]:
            st.subheader("Thay Th·∫ø Outliers")

            # Ki·ªÉm tra session state ƒë·ªÉ l·∫•y feature ƒë√£ ch·ªçn
            if "selected_feature" not in st.session_state:
                st.warning("H√£y ch·ªçn m·ªôt feature ·ªü tab 'Ch·ªçn Feature' tr∆∞·ªõc khi ti·∫øp t·ª•c.")
            else:
                selected_feature = st.session_state.selected_feature
                union_cols_df_to_use = st.session_state.get("union_cols_df_filtered", union_cols_df)
            
                if st.button("Thay th·∫ø outliers"):
                    with st.spinner("ƒêang x·ª≠ l√Ω... vui l√≤ng ch·ªù."):
                        # T√≠nh to√°n c√°c gi√° tr·ªã Q1, Q3 v√† IQR
                        q1 = union_cols_df_to_use[selected_feature].quantile(0.25)
                        q3 = union_cols_df_to_use[selected_feature].quantile(0.75)
                        iqr = q3 - q1
                        lower_bound = q1 - 1.5 * iqr
                        upper_bound = q3 + 1.5 * iqr
                        outliers_count = 0
                        column_outliers = ((union_cols_df_to_use[selected_feature] < lower_bound) | (union_cols_df_to_use[selected_feature] > upper_bound)).sum()
                        outliers_count += column_outliers  # C·ªông v√†o t·ªïng s·ªë outlier

                        # Thay th·∫ø outliers b·∫±ng gi√° tr·ªã gi·ªõi h·∫°n
                        union_cols_df_to_use[selected_feature] = union_cols_df_to_use[selected_feature].apply(
                            lambda x: lower_bound if x < lower_bound else (upper_bound if x > upper_bound else x)
                        )
                        # L∆∞u l·∫°i DataFrame sau khi x·ª≠ l√Ω
                        st.session_state.union_cols_df_filtered = union_cols_df_to_use
                        print(f"union_cols_df_filtered: {union_cols_df_to_use}")
                        st.write(f"S·ªë l∆∞·ª£ng outlier ƒë√£ x·ª≠ l√Ω: {outliers_count}")

                        # Bi·ªÉu ƒë·ªì
                        col1, col2 = st.columns(2)
                        with col1:
                            st.write("**Tr∆∞·ªõc khi x·ª≠ l√Ω outliers**")
                            fig_before = px.box(df, y=selected_feature)
                            st.plotly_chart(fig_before, key="fig_before")
                        with col2:
                            union_cols_df_to_use = pd.concat([union_cols_df_to_use, labels], axis=1)
                            st.write("**Sau khi x·ª≠ l√Ω outliers**")
                            fig_after = px.box(union_cols_df_to_use, y=selected_feature)
                            st.plotly_chart(fig_after, key="fig_after")

        # --- Tab 2: Scale Data ---
        with tabs[2]:
            st.subheader("Scale Data")

            # Ki·ªÉm tra session state ƒë·ªÉ l·∫•y d·ªØ li·ªáu ƒë√£ lo·∫°i b·ªè outliers
            if "union_cols_df_filtered" not in st.session_state:
                st.warning("H√£y th·ª±c hi·ªán b∆∞·ªõc 'Lo·∫°i B·ªè Outliers' tr∆∞·ªõc khi ti·∫øp t·ª•c.")
            else:
                filtered_df = st.session_state.union_cols_df_filtered

                if st.button("Scale"):
                    with st.spinner("ƒêang scale... vui l√≤ng ch·ªù."):
                        def apply_log_transform_positive(X):
                            X_transformed = X.copy()
                            X_transformed = X_transformed.applymap(lambda x: np.log1p(x) if x > 0 else 0)
                            return pd.DataFrame(X_transformed, columns=X.columns)
                        normalized_df = apply_log_transform_positive(filtered_df)
                        st.session_state.union_cols_df_normalized = normalized_df  # L∆∞u l·∫°i d·ªØ li·ªáu ƒë√£ normalize

                        st.write("D·ªØ li·ªáu sau khi scale:")
                        st.write(normalized_df.head())

                        # Bi·ªÉu ƒë·ªì
                        col1, col2 = st.columns(2)
                        with col1:
                            st.write("**Tr∆∞·ªõc khi scale**")
                            fig_before_norm = px.histogram(filtered_df, x=selected_feature)
                            st.plotly_chart(fig_before_norm, key="before_norm")
                        with col2:
                            st.write("**Sau khi scale**")
                            fig_after_norm = px.histogram(normalized_df, x=selected_feature)
                            st.plotly_chart(fig_after_norm, key="after_norm")

        # --- Tab 3: SMOTE ---
        with tabs[3]:
            st.subheader("C√¢n B·∫±ng D·ªØ Li·ªáu v·ªõi SMOTE")

            # Ki·ªÉm tra session state ƒë·ªÉ l·∫•y d·ªØ li·ªáu ƒë√£ normalize
            if "union_cols_df_normalized" not in st.session_state:
                st.warning("H√£y th·ª±c hi·ªán b∆∞·ªõc 'Normalize Data' tr∆∞·ªõc khi ti·∫øp t·ª•c.")
            else:
                normalized_df = st.session_state.union_cols_df_normalized
                print(f"normalized_df: {normalized_df}")
                target_col = st.selectbox("Ch·ªçn c·ªôt target", ['EC1', 'EC2'], key="target_column")

                if st.button("√Åp d·ª•ng SMOTE"):
                    with st.spinner("ƒêang c√¢n b·∫±ng d·ªØ li·ªáu... vui l√≤ng ch·ªù."):
                        X = normalized_df[[selected_feature]].dropna()
                        y = labels[target_col]
                        # print(f"X: {X}")
                        # print(f"y: {y}")

                        # √Åp d·ª•ng SMOTE
                        smote = SMOTE(random_state=42)
                        X_resampled, y_resampled = smote.fit_resample(X, y)

                        # T·∫°o DataFrame m·ªõi sau khi SMOTE
                        smote_df = pd.DataFrame(X_resampled, columns=[selected_feature])
                        smote_df[target_col] = y_resampled
                        st.session_state.union_cols_df_smote = smote_df  # L∆∞u l·∫°i d·ªØ li·ªáu ƒë√£ c√¢n b·∫±ng

                        st.write(f"S·ªë l∆∞·ª£ng m·∫´u tr∆∞·ªõc khi SMOTE: {len(X)}")
                        st.write(f"S·ªë l∆∞·ª£ng m·∫´u sau khi SMOTE: {len(smote_df)}")

                        df_before_smote = pd.concat([normalized_df[[selected_feature]], labels], axis=1)
                        df_after_smote = pd.concat([smote_df[[selected_feature]], smote_df[target_col]], axis=1)
                        col1, col2 = st.columns(2)
                        with col1:
                            # Bi·ªÉu ƒë·ªì tr∆∞·ªõc SMOTE
                            st.write("**Tr∆∞·ªõc khi SMOTE:**")
                            fig_before_smote = px.histogram(df_before_smote, x=selected_feature, color=target_col, title="Tr∆∞·ªõc SMOTE")
                            st.plotly_chart(fig_before_smote)

                        with col2:
                            # Bi·ªÉu ƒë·ªì sau SMOTE
                            st.write("**Sau khi SMOTE:**")
                            
                            fig_after_smote = px.histogram(df_after_smote, x=selected_feature, color=target_col, title="Sau SMOTE")
                            st.plotly_chart(fig_after_smote)
                        col3, col4 = st.columns(2)

                        with col3:
                            # Bi·ªÉu ƒë·ªì countplot tr∆∞·ªõc SMOTE
                            st.write("**Tr∆∞·ªõc khi SMOTE:**")
                            plt.figure(figsize=(8, 6))
                            sns.countplot(x=target_col, data=df_before_smote)
                            st.pyplot(plt)

                        with col4:
                            # Bi·ªÉu ƒë·ªì countplot sau SMOTE
                            st.write("**Sau khi SMOTE:**")
                            plt.figure(figsize=(8, 6))
                            sns.countplot(x=target_col, data=df_after_smote)
                            st.pyplot(plt)
